//---------------------------------------------------------------------------//
// Copyright (c) 2021 Mikhail Komarov <nemo@nil.foundation>
// Copyright (c) 2021 Ilias Khairullin <ilias@nil.foundation>
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------//

#define BOOST_TEST_MODULE zk_sponge_test

#include <vector>
#include <iostream>
#include <random>

#include <boost/test/unit_test.hpp>
#include <boost/test/data/test_case.hpp>
#include <boost/test/data/monomorphic.hpp>

#include <nil/crypto3/algebra/curves/pallas.hpp>
#include <nil/crypto3/algebra/fields/arithmetic_params/pallas.hpp>
#include <nil/crypto3/algebra/random_element.hpp>
#include <nil/crypto3/algebra/fields/pallas/scalar_field.hpp>
#include <nil/crypto3/algebra/fields/pallas/base_field.hpp>

#include <nil/crypto3/hash/poseidon.hpp>

#include <nil/crypto3/zk/transcript/sponge.hpp>

using namespace nil::crypto3;

BOOST_AUTO_TEST_SUITE(zk_sponge_test_suite)

BOOST_AUTO_TEST_CASE(zk_sponge_test_1) {
    using curve_type = algebra::curves::pallas;
    using group_type = typename curve_type::template g1_type<>;
    using scalar_field_type = typename curve_type::scalar_field_type;
    using base_field_type = typename curve_type::base_field_type;

    using sponge_type = typename zk::transcript::sponge<curve_type>;
    sponge_type spng;

    group_type::value_type g1(0x15BF164E54BB9945BD6C74C71D6E46A22BB28AA200B776D62CEE07D5D3BD779F_cppui256,
            0x1AAF6756A745D2942B0CFF2B9A0449947618744388B5BEDFB8E03F7C3FACD72A_cppui256, 0x1_cppui256);
    group_type::value_type g2(0x049C0A39E1C5F049423F0A0EFA7108FFBA6EF4CA7D842A4938B0410554725A2B_cppui256,
            0x1FD82D30C72E05FCEA22493A8C17A44D550B2B8A7B8DBD800475DA063CF69E03_cppui256, 0x1_cppui256);
    group_type::value_type g3(0x2155256CED691E404132E20A09F9882DDAFE37F46E140DD001B74B32DECBBDC3_cppui256,
            0x129059890B4D85AEF46C1C1DBB307F1677DFB3A27DC0EEF8892D05DAE1834212_cppui256, 0x1_cppui256);
    group_type::value_type g4(0x034BB36D843AC319E43F5B5C4FB6A0543834132383AD184C0C81E5488FEEE9F6_cppui256,
            0x1AC0043464FC3A99A315E486F7E572307CA950BF31B356E907475DDF90C2CB1F_cppui256, 0x1_cppui256);
    group_type::value_type g5(0x194A6FCBFAE3F332420E4D1B19ACC5814055775114631E491E22D06C0231D341_cppui256,
            0x3FE97AD6C0C77DAE694582641944727FCCEB42B5C1DD4BCEB7318FE740555A89_cppui256, 0x1_cppui256);
    group_type::value_type g6(0x0235A09BE96AFBF4F03B24D79042F640F2C8E76512AAFB7B029D6A67871A08BD_cppui256,
            0x3EAE455D31E9A86FF0E9246A3F49C75889C753E60787C54568B0528EF3B8BEA0_cppui256, 0x1_cppui256);
    group_type::value_type g7(0x0684D7EC2A8E57A6EF4AD7C7E810BE87258C3E4EABD5FF08AEEC4A1C5DE267CD_cppui256,
            0x140D017A0672059164E6FC641AE6D53B52C61ADCFF35692744CB2DB7F9AF18F6_cppui256, 0x1_cppui256);
    group_type::value_type g8(0x273384E33FC3AADC78544C58F2A84307CB4FB2DE3C2E8CD24F3083CF59AE6DE4_cppui256,
            0x2C7DBC2C7DCD2581CCC4A30DF9DE7AAA662429B1456A8D33C55D6E45CAA933B8_cppui256, 0x1_cppui256);
    group_type::value_type g9(0x34FD62A9F18DC3537943092D42E9CAD488996B8F366C7C13F5F493D2B3AAADE9_cppui256,
            0x284F0D3BA21B6144016A65CFD4E032B923B1D8E8AA15E2AB3A2A080313A27EE8_cppui256, 0x1_cppui256);
    group_type::value_type g10(0x3D80585499BAA14122C5A95966C3FC0F6EE16530451839FE24B6442B34CDD07D_cppui256,
            0x1A8AFBF893BD236DA3FE442D3A68ED2B38D43DED116CB9E7C2542204579AB543_cppui256, 0x1_cppui256);
    group_type::value_type g11(0x0B2B09A73E2BD424E3C55F836A0AFDA36F4FFBE7817273D1892424F9A48AF4BA_cppui256,
            0x0DF79C25282F26BDB6FD0D4C97C60BECA6386E4A63AEEB94952BB93A32621723_cppui256, 0x1_cppui256);
    group_type::value_type g12(0x364C63F94954E9AE63AC3ACB2D1AC5A9BBEE811EA5117B3981369300F72A699B_cppui256,
            0x0E4643FD36C439E27106DF5F7C6380E31FF6EAB1CE2995472A235F4B55EC1CCA_cppui256, 0x1_cppui256);
    group_type::value_type g13(0x3186324E6978554B9842F427C823E6DA3E9B24A8D147FDADBFC5756EC16B11EF_cppui256,
            0x3E7133267A8A3E61E70818B4883448DCAB43823FE91689B008A3E8C1B842DEB9_cppui256, 0x1_cppui256);
    group_type::value_type g14(0x1E63D3EE380868CA0A72D200A616F3F0C0FC092498D5F4E52DF429DD1362F6CC_cppui256,
            0x08409DC30D2F030B09B86EB5B4CBDA24A2D7ED86BB7C5F05C875D861F8662568_cppui256, 0x1_cppui256);
    group_type::value_type g15(0x0EBA34EB73D78BBE91430F106D1392FCA760D5D7116FC5598E449CB3DE127EBE_cppui256,
            0x134B175CD10B5F2819AC7210319C42D59D74F7452D430C658768664899BDFCE7_cppui256, 0x1_cppui256);
    spng.absorb_g({g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12, g13, g14, g15});

    typename scalar_field_type::value_type chal1(0x00000000000000000000000000000000DC6A8A6015CB0604C414B073093569C1_cppui256);
    BOOST_CHECK(spng.challenge() == chal1);
    typename scalar_field_type::value_type chal2(0x000000000000000000000000000000007E1778523C2CE15B3CA0C4ABA91FE0C9_cppui256);
    BOOST_CHECK(spng.challenge() == chal2);

    group_type::value_type g16(0x08436F0674E6EBE971306CA8C88A1C9475C0412D261600DDECC45293FF081CF7_cppui256,
            0x3A1DB3FD6E668B739E08B9CF4AEDE2CDB493723D04B36517951BEC5D1520995A_cppui256, 0x1_cppui256);
    spng.absorb_g({g16});

    typename scalar_field_type::value_type chal3(0x00000000000000000000000000000000777FC8482573EFF79A7BE3C1B02E17C3_cppui256);
    BOOST_CHECK(spng.challenge() == chal3);

    group_type::value_type g17(0x2B3F8B7CBA5E998BF7534E7F70CD36979835CCF1E2FB8B2820995B38F1F6FEB1_cppui256,
            0x27B6765811B29786FA60B29905E917B5AE12322A699693677B97410EB457C3B1_cppui256, 0x1_cppui256);
    group_type::value_type g18(0x3038FA6822AAF40DF1E1896CED0CB7558AEE7241D9E0B4088ACB2B7B703AFA18_cppui256,
            0x211DEE0F401A29CBD0C5910BC8DAAFD42C620B3ECBFA84A426B0C36282A595FD_cppui256, 0x1_cppui256);
    group_type::value_type g19(0x0F8F5E911D38CEA0DFD8B9C4B965330959A129386C8D5CB5C5B11B07D2F2E2A3_cppui256,
            0x2363747B3F67C1B2276B7707B7D27B6E5F13D66FE11BCB24FAB1A4C458BB5EA7_cppui256, 0x1_cppui256);
    group_type::value_type g20(0x2F99E0ACD3866ABB7D89C35961E84F7F32024AC5CEB9D208AB00E027295BC041_cppui256,
            0x3204A072137D8D485A26383D2CDCC311D10DFBDD22670446871DE4086E6DCF61_cppui256, 0x1_cppui256);
    group_type::value_type g21(0x01114BA3D83FD1FBA702B1A04BDCC777D5A45FB0825410425D363D3753195B99_cppui256,
            0x32E6C1D4E5B276A1FFF8ECC685EFD727B49C72BFF4710C986C41AA9E28AD9908_cppui256, 0x1_cppui256);
    group_type::value_type g22(0x0BADC235182ACA1497AB12B1C88C3ADCA616AEDE2891E5E43C5448BC28F26E22_cppui256,
            0x0B8DAE321A27C3309FD79F3B8B89CB085AD6952A8857B0D203CE8F26A233E502_cppui256, 0x1_cppui256);
    group_type::value_type g23(0x303E243833A75575F5F6E028A291B695AE6ABAE80C34B1707F17C44C176A1702_cppui256,
            0x1BC379498B509EA8819724A12BF2FED0BCF27DB00DD1840DC1E403D065004FA0_cppui256, 0x1_cppui256);
    spng.absorb_g({g17, g18, g19, g20, g21, g22, g23});
    
    typename scalar_field_type::value_type chal4(0x0000000000000000000000000000000075FB4498B25CFD101DD5B5CD0C4CD002_cppui256);
    BOOST_CHECK(spng.challenge() == chal4);
}

BOOST_AUTO_TEST_SUITE_END()
