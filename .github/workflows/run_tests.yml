name: Run tests

on:
  # Triggers the workflow on pull request events but only for the master branch
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  run_tests:
    runs-on: [self-hosted]

    env:
      SUITE_REPO: "NilFoundation/crypto3"
      LIB_NAME: "blueprint"
      TARGETS: "
        blueprint_hashes_plonk_sha256_process_test
        blueprint_hashes_plonk_sha512_process_test
        blueprint_non_native_plonk_non_native_demo_test
        blueprint_non_native_plonk_non_native_range_test
        blueprint_non_native_plonk_fixed_base_mul_test
        blueprint_non_native_plonk_complete_addition_test
        blueprint_non_native_plonk_var_base_mul_per_bit_test
        blueprint_non_native_plonk_variable_base_multiplication_test
        " # Tests to execute

    steps:
      - name: Cleanup # move to scripts on runner
        run: |
          rm -rf ./* || true
          rm -rf ./.??* || true

      - name: Checkout suite
        uses: actions/checkout@v3
        with:
          repository: ${{ env.SUITE_REPO }}
          submodules: recursive

      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          path: ./libs/${{ env.LIB_NAME }}
          submodules: recursive

      - name: Cmake and build
        env:
          CMAKE_ARGS: "
            -DCMAKE_BUILD_TYPE=Release
            -DBUILD_SHARED_LIBS=FALSE
            -DBUILD_TESTS=TRUE
            -DBUILD_WITH_NUMA=FALSE
            -DBUILD_WITH_CUDA=FALSE
            -DBUILD_WITH_OPENCL=FALSE
            -DBUILD_WITH_SANITIZE=FALSE
            -DBUILD_WITH_DPDK=FALSE
            -DCRYPTO3_HASH_POSEIDON=FALSE
            -DBUILD_EXAMPLES=TRUE
            -DZK_PLACEHOLDER_PROFILING=TRUE
            "
        run: |
          mkdir build
          cd build
          cmake ${{ env.CMAKE_ARGS }} ..
          cmake --build . -t ${{ env.TARGETS }}

      - name: Run tests
        working-directory: ./build
        run: |
          cd build/libs/${{ env.LIB_NAME }}/test/
          for target in ${{ env.TARGETS }}
          do
            echo $target
            ./$target
          done
